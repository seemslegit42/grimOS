version: '3.8'

services:
  api-gateway:
    build:
      context: ./api-gateway
      dockerfile: Dockerfile
    ports:
      - "5000:5000"
    environment:
      - PORT=5000
      - NODE_ENV=development
      - AUTH_SERVICE_URL=http://auth:8000
      - JWT_SECRET=${JWT_SECRET}
      - SERVICE_SECRET_KEY=${SERVICE_SECRET_KEY}
      - RATE_LIMIT_WINDOW_MS=60000
      - RATE_LIMIT_MAX=100
      - CORS_ORIGIN=http://localhost:3000,http://localhost:5173
    depends_on:
      - auth
    volumes:
      - ./api-gateway:/app
      - /app/node_modules
    restart: unless-stopped
  auth:
    build:
      context: ./auth
      dockerfile: Dockerfile
    ports:
      - "8000:8000"  # FastAPI HTTP
      - "50051:50051"  # gRPC
    environment:
      - POSTGRES_SERVER=postgres
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=postgres
      - POSTGRES_DB=auth_db
      - SECRET_KEY=${SECRET_KEY}
      - SERVICE_SECRET_KEY=${SERVICE_SECRET_KEY}
      - ACCESS_TOKEN_EXPIRE_MINUTES=60
      - REFRESH_TOKEN_EXPIRE_DAYS=7
      - ENVIRONMENT=local
      - BACKEND_CORS_ORIGINS=["http://localhost:5000", "http://localhost:8001"]
      - KAFKA_BOOTSTRAP_SERVERS=kafka:9092
      - KAFKA_USER_EVENTS_TOPIC=user-events
      - KAFKA_ENABLED=true
      - GRPC_SERVER_HOST=0.0.0.0
      - GRPC_SERVER_PORT=50051
      - USER_SERVICE_HOST=user
      - USER_SERVICE_PORT=50052
      - GRPC_CLIENT_TIMEOUT=5.0
      - GRPC_CLIENT_MAX_RETRIES=3
      - GRPC_CLIENT_RETRY_DELAY=0.5
    volumes:
      - ./auth:/app
    depends_on:
      - postgres
      - kafka
    restart: unless-stopped
    
  user:
    build:
      context: ./user
      dockerfile: Dockerfile
    ports:
      - "8001:8000"  # FastAPI HTTP
      - "50052:50052"  # gRPC
    environment:
      - ENVIRONMENT=local
      - POSTGRES_SERVER=user-db
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=postgres
      - POSTGRES_DB=user_db
      - AUTH_SERVICE_HOST=auth
      - AUTH_SERVICE_PORT=50051
      - BACKEND_CORS_ORIGINS=["http://localhost:5000", "http://localhost:3000"]
      - KAFKA_BOOTSTRAP_SERVERS=kafka:9092
      - KAFKA_USER_EVENTS_TOPIC=user-events
      - KAFKA_ENABLED=true
      - GRPC_SERVER_HOST=0.0.0.0
      - GRPC_SERVER_PORT=50052
    volumes:
      - ./user:/app
    depends_on:
      - user-db
      - auth
    restart: unless-stopped
  postgres:
    image: postgres:15-alpine
    volumes:
      - auth-postgres-data:/var/lib/postgresql/data
    environment:
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=postgres
      - POSTGRES_DB=auth_db
    ports:
      - "5432:5432"
    restart: unless-stopped
    
  user-db:
    image: postgres:15-alpine
    volumes:
      - user-postgres-data:/var/lib/postgresql/data
    environment:
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=postgres
      - POSTGRES_DB=user_db
    ports:
      - "5433:5432"
    restart: unless-stopped
  
  # Kafka components
  zookeeper:
    extends:
      file: kafka-docker-compose.yml
      service: zookeeper
  
  kafka:
    extends:
      file: kafka-docker-compose.yml
      service: kafka
    depends_on:
      - zookeeper
  
  kafka-ui:
    extends:
      file: kafka-docker-compose.yml
      service: kafka-ui
    depends_on:
      - kafka
  
  schema-registry:
    extends:
      file: kafka-docker-compose.yml
      service: schema-registry
    depends_on:
      - kafka
    # Event Consumer service
  event-consumer:
    build:
      context: ./event-consumer
      dockerfile: Dockerfile
    environment:
      - KAFKA_BOOTSTRAP_SERVERS=kafka:9092
      - KAFKA_USER_EVENTS_TOPIC=user-events
      - KAFKA_GROUP_ID=user-events-consumer
      - KAFKA_AUTO_OFFSET_RESET=earliest
      - LOG_LEVEL=INFO
      - ENVIRONMENT=local
    volumes:
      - ./event-consumer:/app
    ports:
      - "8001:8000"
    depends_on:
      - kafka
      - schema-registry
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 5s
      retries: 3
    depends_on:
      - kafka
    restart: unless-stopped

volumes:
  auth-postgres-data:
  user-postgres-data:

networks:
  default:
    name: grimoire-network
    driver: bridge
