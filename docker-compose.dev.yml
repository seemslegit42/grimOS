# Docker Compose file for grimOS
# This is the development environment configuration

version: '3.8'

# Extend the base docker-compose file
x-extends:
  file: docker-compose.base.yml
  service: services

services:
  # Inherit base services
  postgres:
    extends:
      file: docker-compose.base.yml
      service: postgres
  
  redis:
    extends:
      file: docker-compose.base.yml
      service: redis
  
  zookeeper:
    extends:
      file: docker-compose.base.yml
      service: zookeeper
  
  kafka:
    extends:
      file: docker-compose.base.yml
      service: kafka
  
  chroma:
    extends:
      file: docker-compose.base.yml
      service: chroma

  # API Gateway
  api-gateway:
    build:
      context: ./services/api-gateway
      dockerfile: Dockerfile
    ports:
      - "8080:8080"
    volumes:
      - ./services/api-gateway:/app
    environment:
      - BACKEND_URL=http://backend:8000
      - COGNITIVE_CORE_URL=http://cognitive-core:8001
      - COMPOSABLE_RUNES_URL=http://composable-runes:8002
      - INTEROPERABILITY_URL=http://interoperability:8003
      - SECRET_KEY=dev-secret-key
      - ENVIRONMENT=development
    depends_on:
      - backend
      - cognitive-core
      - composable-runes
      - interoperability

  # Core Services
  backend:
    build:
      context: ./apps/backend
      dockerfile: Dockerfile
    ports:
      - "8000:8000"
    volumes:
      - ./apps/backend:/app
    environment:
      - DATABASE_URL=postgresql+psycopg://postgres:postgres@postgres:5432/grimos
      - REDIS_URL=redis://redis:6379/0
      - KAFKA_BOOTSTRAP_SERVERS=kafka:29092
      - ALLOWED_ORIGINS=http://localhost:3000
      - SECRET_KEY=dev-secret-key
      - ENVIRONMENT=development
      - DEBUG=true
    depends_on:
      - postgres
      - redis
      - kafka

  cognitive-core:
    build:
      context: ./services/ai
      dockerfile: Dockerfile
    ports:
      - "8001:8001"
    volumes:
      - ./services/ai:/app
    environment:
      - DATABASE_URL=postgresql+asyncpg://postgres:postgres@postgres:5432/grimos
      - REDIS_URL=redis://redis:6379/1
      - KAFKA_BOOTSTRAP_SERVERS=kafka:29092
      - VECTOR_DB_HOST=chroma
      - VECTOR_DB_PORT=8000
      - OPENAI_API_KEY=${OPENAI_API_KEY:-}
      - GEMINI_API_KEY=${GEMINI_API_KEY:-}
      - SECRET_KEY=dev-secret-key
      - ENVIRONMENT=development
      - PORT=8001
    depends_on:
      - postgres
      - redis
      - kafka
      - chroma

  composable-runes:
    build:
      context: ./services/composable-runes
      dockerfile: Dockerfile
    ports:
      - "8002:8002"
    volumes:
      - ./services/composable-runes:/app
    environment:
      - DATABASE_URL=postgresql+asyncpg://postgres:postgres@postgres:5432/grimos
      - REDIS_URL=redis://redis:6379/2
      - KAFKA_BOOTSTRAP_SERVERS=kafka:29092
      - COGNITIVE_CORE_URL=http://cognitive-core:8001
      - SECRET_KEY=dev-secret-key
      - ENVIRONMENT=development
      - PORT=8002
    depends_on:
      - postgres
      - redis
      - kafka
      - cognitive-core

  interoperability:
    build:
      context: ./services/interoperability
      dockerfile: Dockerfile
    ports:
      - "8003:8003"
    volumes:
      - ./services/interoperability:/app
    environment:
      - DATABASE_URL=postgresql+asyncpg://postgres:postgres@postgres:5432/grimos
      - REDIS_URL=redis://redis:6379/3
      - KAFKA_BOOTSTRAP_SERVERS=kafka:29092
      - SECRET_KEY=dev-secret-key
      - ENVIRONMENT=development
      - PORT=8003
    depends_on:
      - postgres
      - redis
      - kafka

  # Frontend
  frontend:
    build:
      context: ./apps/frontend
      dockerfile: Dockerfile
    ports:
      - "3000:3000"
    volumes:
      - ./apps/frontend:/app
    environment:
      - NEXT_PUBLIC_API_URL=http://localhost:8080
      - NEXT_PUBLIC_WEBSOCKET_URL=ws://localhost:8080
      - NODE_ENV=development
    depends_on:
      - api-gateway
